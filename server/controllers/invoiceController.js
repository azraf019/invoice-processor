// server/controllers/invoiceController.js

const { processPDF } = require('../services/geminiService');
const Invoice = require('../models/Invoice');
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path'); // Import the path module

// ... (getInvoices, exportExcel, clearInvoices functions remain the same) ...


exports.uploadInvoice = async (req, res, next) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: 'No PDF file uploaded' });
    }
    if (!req.body.prompt) {
      return res.status(400).json({ message: 'Prompt is required' });
    }

    const pdfPath = req.file.path;
    const prompt = req.body.prompt;
    const extractedData = await processPDF(pdfPath, prompt);

    // --- MODIFIED ---
    // Add the PDF filename to the data before saving
    const invoiceData = {
      ...extractedData,
      pdfFilename: req.file.filename // Save the unique filename generated by Multer
    };

    const invoice = new Invoice(invoiceData);
    await invoice.save();

    // We no longer delete the file, as we need to serve it later.
    // fs.unlinkSync(pdfPath); 

    res.status(200).json({ message: 'Invoice processed and saved', data: invoice.toObject() });
  } catch (error) {
    console.error('Controller error:', error.message);
    if (req.file) {
      // Clean up file on error if it exists
      try { fs.unlinkSync(req.file.path); } catch (e) { console.error("Error cleaning up file:", e); }
    }
    next(error);
  }
};

exports.bulkUpload = async (req, res, next) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ message: 'No PDF files uploaded' });
    }
    if (!req.body.prompt) {
      return res.status(400).json({ message: 'A prompt is required for bulk processing' });
    }

    const prompt = req.body.prompt;
    const allInvoicesData = [];

    for (const file of req.files) {
      try {
        const extractedData = await processPDF(file.path, prompt);
        // --- MODIFIED ---
        // Add the PDF filename to the data
        allInvoicesData.push({
          ...extractedData,
          pdfFilename: file.filename
        });
      } catch (processingError) {
        console.error(`Failed to process file ${file.originalname}:`, processingError);
        // If one file fails, delete it and continue
        try { fs.unlinkSync(file.path); } catch (e) { console.error("Error cleaning up file:", e); }
      }
      // We don't delete successful files here
    }

    if (allInvoicesData.length === 0) {
      return res.status(400).json({ message: 'None of the uploaded PDFs could be processed.' });
    }

    const savedInvoices = await Invoice.insertMany(allInvoicesData);

    res.status(200).json({
      message: `Bulk upload successful. Processed ${savedInvoices.length} of ${req.files.length} files.`,
      data: savedInvoices
    });
  } catch (error) {
    // Clean up any remaining files if the entire process fails
    if (req.files) {
      req.files.forEach(file => {
        try { fs.unlinkSync(file.path); } catch (e) { console.error("Error cleaning up file:", e); }
      });
    }
    next(error);
  }
};

exports.updateInvoice = async (req, res, next) => {
  try {
      const { id } = req.params;
      const updatedData = req.body;

      const updatedInvoice = await Invoice.findByIdAndUpdate(id, updatedData, { new: true });

      if (!updatedInvoice) {
          return res.status(404).json({ message: 'Invoice not found' });
      }

      res.status(200).json({ message: 'Invoice updated successfully', data: updatedInvoice.toObject() });
  } catch (error) {
      next(error);
  }
};

// --- NEW FUNCTION ---
/**
 * Serves the PDF file associated with an invoice.
 */
exports.getInvoicePDF = async (req, res, next) => {
    try {
        const invoice = await Invoice.findById(req.params.id);
        if (!invoice || !invoice.pdfFilename) {
            return res.status(404).json({ message: 'Invoice or PDF not found.' });
        }

        const pdfPath = path.join(__dirname, '..', 'uploads', invoice.pdfFilename);

        if (fs.existsSync(pdfPath)) {
            res.sendFile(pdfPath);
        } else {
            return res.status(404).json({ message: 'PDF file not found on server.' });
        }
    } catch (error) {
        next(error);
    }
};

// ... (getInvoices, exportExcel, clearInvoices functions) ...
exports.getInvoices = async (req, res, next) => {
  try {
    const invoices = await Invoice.find().sort({ createdAt: -1 });
    res.json(invoices.map(invoice => invoice.toObject()));
  } catch (error) {
    next(error);
  }
};

exports.exportExcel = async (req, res, next) => {
  try {
    const invoices = await Invoice.find();
    
    const data = invoices.map(invoice => ({
      "Invoice Number": invoice.invoiceNumber,
      "Invoice Date": invoice.invoiceDate,
      "Supplier Name": invoice.supplierName,
      "Total Amount": invoice.totalAmount,
      "Payment Terms": invoice.paymentTerms,
      "Delivery Date": invoice.deliveryDate,
    }));

    const ws = xlsx.utils.json_to_sheet(data);
    const wb = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(wb, ws, 'Invoices');
    const buffer = xlsx.write(wb, { type: 'buffer', bookType: 'xlsx' });

    res.setHeader('Content-Disposition', 'attachment; filename=invoices.xlsx');
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.send(buffer);
  } catch (error) {
    next(error);
  }
};

exports.clearInvoices = async (req, res, next) => {
  try {
    // Also delete all files in the uploads directory
    const directory = 'uploads';
    fs.readdir(directory, (err, files) => {
      if (err) throw err;
      for (const file of files) {
        // Keep .gitkeep if it exists
        if (file !== '.gitkeep') {
          fs.unlink(path.join(directory, file), err => {
            if (err) throw err;
          });
        }
      }
    });

    await Invoice.deleteMany({});
    res.status(200).json({ message: 'Database and uploaded files cleared successfully.' });
  } catch (error) {
    next(error);
  }
};
